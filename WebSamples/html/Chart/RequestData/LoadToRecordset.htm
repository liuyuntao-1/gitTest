<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Web报表(B/S报表)演示 - 将从服务器获得的XML数据提供给图表</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <style type="text/css">
        html,body {
            margin:0;
            height:100%;
        }
    </style>
	<script src="../../CreateControl.js" type="text/javascript"></script>
	<script src="../../GRUtility.js" type="text/javascript"></script>

	<script type="text/javascript">
function window_onload() 
{
    ReportViewer.Stop();
    
    var Report = ReportViewer.Report;
    
    //关联报表事件
    Report.OnChartRequestData = OnChartRequestData;

    ReportViewer.Start();
}

function OnChartRequestData(Sender)
{
    if (Sender.Name == "ChartBar")
	{
	    NormalChartFillValues(Sender);
	}
    else if (Sender.Name == "ChartPie")
	{
	    NormalChartFillValues(Sender);
	}
    else if (Sender.Name == "ChartScatterLine")
	{
		XYChartFillValues(Sender);
	}
    else if (Sender.Name == "ChartBubble")
	{
		XYZChartFillValues(Sender);
	}
}

//此种方式适用于向各种柱图、连线图与饼图提供数据
function NormalChartFillValues(Chart)
{
	Chart.SeriesCount = 3;
	Chart.GroupCount = 4;

	Chart.SetSeriesLabel(0, "张三");
	Chart.SetSeriesLabel(1, "李四");
	Chart.SetSeriesLabel(2, "王五");

	Chart.SetGroupLabel(0, "一");
	Chart.SetGroupLabel(1, "二");
	Chart.SetGroupLabel(2, "三");
	Chart.SetGroupLabel(3, "四");

	Chart.SetValue(0, 0, 1000);
	Chart.SetValue(0, 1, 1200);
	Chart.SetValue(0, 2, 1500);
	Chart.SetValue(0, 3, 800);

	Chart.SetValue(1, 0, 1500);
	Chart.SetValue(1, 1, 1800);
	Chart.SetValue(1, 2, 2000);
	Chart.SetValue(1, 3, 1200);

	Chart.SetValue(2, 0, 800);
	Chart.SetValue(2, 1, 1000);
	Chart.SetValue(2, 2, 700);
	Chart.SetValue(2, 3, 500);
}

//提供散点图的数据，产生随机坐标点数据
function XYChartFillValues(Chart)
{
//	const int MaxX = 1000;
//	const int MaxY = 300;

	Chart.SetSeriesLabel(0, "序列 甲");
	Chart.SetSeriesLabel(1, "序列 乙");
	Chart.SetSeriesLabel(2, "序列 丙");

	Chart.EmptyValues();
	
	//第1个序列(Series)
	Chart.AddXYValue(0, 121.2, 25.6);
	Chart.AddXYValue(0, 253.6, 85.9);
	Chart.AddXYValue(0, 481.7, 135.4);
	Chart.AddXYValue(0, 562.1, 235.6);

	//第2个序列(Series)
	Chart.AddXYValue(1, 72.2, 35.6);
	Chart.AddXYValue(1, 256.5, 120.6);
	Chart.AddXYValue(1, 578.5, 289.2);
	
	//第3个序列(Series)
	Chart.AddXYValue(2, 26.2, 160.6);
	Chart.AddXYValue(2, 188.2, 138.5);
	Chart.AddXYValue(2, 326.2, 196.2);
	Chart.AddXYValue(2, 463.1, 248.6);
	Chart.AddXYValue(2, 570.1, 290);
}

//提供散点连线图的数据，产生随机坐标点数据，保持X值是递增的，并自定义XY轴刻度位置与显示文字
function XYZChartFillValues(Chart)
{
	Chart.SetSeriesLabel(0, "甲A");
	Chart.SetSeriesLabel(1, "乙B");
	Chart.SetSeriesLabel(2, "丙C");

	Chart.EmptyValues();
	
	//第1个序列(Series)
	Chart.AddXYZValue(0, 121.2, 225.6, 5.6);
	Chart.AddXYZValue(0, 253.6, 85.9, 2.4);
	Chart.AddXYZValue(0, 481.7, 135.4, 7.8);
	Chart.AddXYZValue(0, 562.1, 235.6, 1.2);

	//第2个序列(Series)
	Chart.AddXYZValue(1, 72.2, 135.6, 2.8);
	Chart.AddXYZValue(1, 356.5, 120.6, 3.6);
	Chart.AddXYZValue(1, 578.5, 289.2, 1.8);

	//设置X坐标刻度文字
	Chart.XAxis.EmptyCustomScale(); //Chart.EmptyYAxisText();
	Chart.XAxis.AddCustomScale(100, "100值");
	Chart.XAxis.AddCustomScale(200, "200值");
	Chart.XAxis.AddCustomScale(300, "300值");
	Chart.XAxis.AddCustomScale(400, "400值");
	Chart.XAxis.AddCustomScale(500, "500值");
	Chart.XAxis.AddCustomScale(600, "600值");

	//设置Y坐标刻度文字
	Chart.YAxis.EmptyCustomScale();
	Chart.YAxis.AddCustomScale(0,   "0级");
	Chart.YAxis.AddCustomScale(100, "1级");
	Chart.YAxis.AddCustomScale(200, "2级");
	Chart.YAxis.AddCustomScale(300, "3级");
	Chart.YAxis.AddCustomScale(400, "4级");
}

 	</script>   
</head>
<body style="margin:0" onload="return window_onload()">
    <script type="text/javascript"> 
	    CreatePrintViewerEx("100%", "100%", "Chart.grf", "", false, "");
	    //CreateDisplayViewerEx("100%", "100%", "Chart.grf", "", false, "");
    </script>
</body>
</html>
 